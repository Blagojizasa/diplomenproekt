using System;
using System.Windows.Forms;
using System.Drawing;
using System.Data.SqlClient; // For database operations
using System.Data;          // For DataSet, ConnectionState
using System.Linq;          // For FirstOrDefault (optional)

namespace BankManagementSystem
{
    public partial class AddAccounts : Form
    {
        #region Fields

        // --- UI Enhancement Fields ---
        private bool isDragging = false;
        private Point lastLocation;

        // --- Database Connection ---
        // !! VERIFY THIS PATH IS CORRECT FOR YOUR PC !!
        SqlConnection Con = new SqlConnection(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\BankDb.mdf;Integrated Security=True;Connect Timeout=30");

        // --- Class Level Variable ---
        int Key = 0; // To store the primary key (AcNum) of the selected account

        #endregion

        #region Constructor and Load Event

        public AddAccounts()
        {
            // Generated by the designer - DO NOT REMOVE
            InitializeComponent();

            // Apply styles and load initial data
            SetupDataGridViewStyles();
            DisplayAccounts();
        }

        // Form Load event handler (matches Designer.cs)
        private void AddAccounts_Load(object sender, EventArgs e)
        {
            // Setup mouse events for form dragging (can be attached to Form or specific controls)
            this.MouseDown += Form_MouseDown;
            this.MouseMove += Form_MouseMove;
            this.MouseUp += Form_MouseUp;
        }

        #endregion

        #region DataGridView Methods

        // Fetches data from DB and displays it in the AccountDGV
        private void DisplayAccounts()
        {
            // Use the correct control name verified from Designer.cs
            if (AccountDGV == null) return;

            try
            {
                if (Con.State == ConnectionState.Closed) Con.Open();
                string Query = "SELECT * FROM AccountTbl"; // !! Verify table name !!
                SqlDataAdapter sda = new SqlDataAdapter(Query, Con);
                var ds = new DataSet();
                sda.Fill(ds);
                AccountDGV.DataSource = ds.Tables[0];

                // Prevent the first row from being selected automatically after loading
                AccountDGV.ClearSelection();

            }
            catch (Exception ex)
            {
                MessageBox.Show("Error loading account data: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (Con.State == ConnectionState.Open) Con.Close();
            }
        }

        // Applies styling and behavior settings to the AccountDGV
        private void SetupDataGridViewStyles()
        {
            if (AccountDGV == null) return;

            // Behavior
            AccountDGV.SelectionMode = DataGridViewSelectionMode.FullRowSelect; // Select whole row
            AccountDGV.MultiSelect = false;       // Select only one row
            AccountDGV.ReadOnly = true;           // Prevent direct editing in grid
            AccountDGV.AllowUserToAddRows = false; // Hide the empty bottom row
            AccountDGV.AllowUserToDeleteRows = false;
            AccountDGV.RowHeadersVisible = false; // Hide the left-most header column
            AccountDGV.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill; // Adjust column widths

            // Styling (matches image)
            AccountDGV.ColumnHeadersDefaultCellStyle.BackColor = Color.DarkGreen;
            AccountDGV.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
            AccountDGV.ColumnHeadersDefaultCellStyle.Font = new Font("Microsoft Sans Serif", 8.25F, FontStyle.Bold);
            AccountDGV.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft; // Align header text
            AccountDGV.EnableHeadersVisualStyles = false; // Required for custom header styles

            // Row Styles
            AccountDGV.DefaultCellStyle.BackColor = Color.White; // Standard row background
            AccountDGV.DefaultCellStyle.ForeColor = Color.Black; // Standard row text color
            AccountDGV.DefaultCellStyle.SelectionBackColor = Color.ForestGreen; // Selected row background
            AccountDGV.DefaultCellStyle.SelectionForeColor = Color.White; // Selected row text

            // Border Styles
            AccountDGV.BorderStyle = BorderStyle.FixedSingle;
            AccountDGV.CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal; // Horizontal lines between rows
        }

        // Handles the event when the selected row in the DataGridView changes
        // !! IMPORTANT: Ensure this method is connected to the 'SelectionChanged' event !!
        // !!          in the DataGridView's properties/events in the Form Designer.  !!
        // !!          Make sure 'CellClick' and 'CellContentClick' are NOT connected. !!
        private void AccountDGV_SelectionChanged(object sender, EventArgs e)
        {
            // Check if any row is actually selected
            if (AccountDGV.SelectedRows.Count > 0)
            {
                DataGridViewRow row = AccountDGV.SelectedRows[0]; // Get the first selected row

                // !! VERIFY COLUMN ORDER (0=Key, 1=Name, etc.) AND CELL COUNT !!
                if (row != null && row.Cells.Count > 7)
                {
                    // Use control names from Designer.cs
                    AcNameTbl.Text = row.Cells[1].Value?.ToString() ?? "";
                    AcPhoneTbl.Text = row.Cells[2].Value?.ToString() ?? "";
                    AcAddressTbl.Text = row.Cells[3].Value?.ToString() ?? "";

                    string genderValue = row.Cells[4].Value?.ToString() ?? "";
                    GenderTbl.SelectedIndex = GenderTbl.FindStringExact(genderValue); // Use GenderTbl
                    if (GenderTbl.SelectedIndex == -1) GenderTbl.SelectedItem = genderValue; // Fallback

                    OccupationTbl.Text = row.Cells[5].Value?.ToString() ?? "";

                    string educationValue = row.Cells[6].Value?.ToString() ?? "";
                    EducationCb.SelectedIndex = EducationCb.FindStringExact(educationValue);
                    if (EducationCb.SelectedIndex == -1) EducationCb.SelectedItem = educationValue; // Fallback

                    IncomeTbl.Text = row.Cells[7].Value?.ToString() ?? "";

                    // Get the Primary Key (AcNum) - Assumes it's in Cell[0]
                    if (row.Cells[0].Value != null && row.Cells[0].Value != DBNull.Value)
                    {
                        try { Key = Convert.ToInt32(row.Cells[0].Value); }
                        catch (FormatException) { MessageBox.Show("Could not read the Account Key (AcNum).", "Data Error", MessageBoxButtons.OK, MessageBoxIcon.Warning); Key = 0; }
                        catch (Exception ex) { MessageBox.Show("Error reading Account Key: " + ex.Message, "Data Error", MessageBoxButtons.OK, MessageBoxIcon.Error); Key = 0; }
                    }
                    else { Key = 0; } // Reset key if PK cell is null/empty
                }
                else { Key = 0; /* Reset(); */ } // Reset key if row data seems invalid, optionally clear fields
            }
            else
            {
                Key = 0; // Reset key if no row is selected
            }
        }

        #endregion

        #region Form Action Methods

        // Clears all input fields and resets the selected Key
        private void Reset()
        {
            // Use control names from Designer.cs
            AcNameTbl.Text = "";
            AcPhoneTbl.Text = "";
            AcAddressTbl.Text = "";
            OccupationTbl.Text = "";
            IncomeTbl.Text = "";
            GenderTbl.SelectedIndex = -1; // Use GenderTbl
            EducationCb.SelectedIndex = -1;
            Key = 0; // Reset the selected account key

            // Deselect row in the grid visually
            if (AccountDGV != null) AccountDGV.ClearSelection();

            if (AcNameTbl != null) AcNameTbl.Focus(); // Set focus back to the first field
        }

        // --- Button Click Handlers ---

        // Close Button (matches Designer.cs wiring for btnClose)
        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        // Submit Button (CREATE) - Method name matches Designer.cs wiring for SubmitBtn
        private void btnSubmit_Click(object sender, EventArgs e)
        {
            // Use control names from Designer.cs
            if (string.IsNullOrWhiteSpace(AcNameTbl.Text) || string.IsNullOrWhiteSpace(AcPhoneTbl.Text) || string.IsNullOrWhiteSpace(AcAddressTbl.Text) || GenderTbl.SelectedIndex == -1 || string.IsNullOrWhiteSpace(OccupationTbl.Text) || EducationCb.SelectedIndex == -1 || string.IsNullOrWhiteSpace(IncomeTbl.Text))
            { MessageBox.Show("Missing Information"); return; }

            try
            {
                if (Con.State == ConnectionState.Closed) Con.Open();
                // !! Verify table name and column names !!
                SqlCommand cmd = new SqlCommand("INSERT INTO AccountTbl(AcName, AcPhone, AcAddress, AcGen, AcOccup, AcEduc, AcInc, AcBal) VALUES(@AN, @AP, @AA, @AG, @AO, @AE, @AI, @AB)", Con);
                // Use control names from Designer.cs
                cmd.Parameters.AddWithValue("@AN", AcNameTbl.Text);
                cmd.Parameters.AddWithValue("@AP", AcPhoneTbl.Text);
                cmd.Parameters.AddWithValue("@AA", AcAddressTbl.Text);
                cmd.Parameters.AddWithValue("@AG", GenderTbl.SelectedItem.ToString()); // Use GenderTbl
                cmd.Parameters.AddWithValue("@AO", OccupationTbl.Text);
                cmd.Parameters.AddWithValue("@AE", EducationCb.SelectedItem.ToString());
                cmd.Parameters.AddWithValue("@AI", IncomeTbl.Text); // Convert if DB field is numeric
                cmd.Parameters.AddWithValue("@AB", 0);
                cmd.ExecuteNonQuery();
                MessageBox.Show("Account Created!!!");
            }
            catch (Exception Ex) { MessageBox.Show(Ex.Message); }
            finally { if (Con.State == ConnectionState.Open) Con.Close(); }
            Reset(); // Reset fields after successful operation
            DisplayAccounts(); // Refresh grid
        }

        // Edit Button (UPDATE) - Method name matches Designer.cs wiring for EditBtn
        private void btnEdit_Click(object sender, EventArgs e)
        {
            // Uses Key set by AccountDGV_SelectionChanged
            if (Key == 0) { MessageBox.Show("Select The Account to Update"); return; }
            // Use control names from Designer.cs
            if (string.IsNullOrWhiteSpace(AcNameTbl.Text) || string.IsNullOrWhiteSpace(AcPhoneTbl.Text) || string.IsNullOrWhiteSpace(AcAddressTbl.Text) || GenderTbl.SelectedIndex == -1 || string.IsNullOrWhiteSpace(OccupationTbl.Text) || EducationCb.SelectedIndex == -1 || string.IsNullOrWhiteSpace(IncomeTbl.Text))
            { MessageBox.Show("Missing Information"); return; }

            try
            {
                if (Con.State == ConnectionState.Closed) Con.Open();
                // !! Verify table name, column names, and PK column name (AcNum) !!
                SqlCommand cmd = new SqlCommand("UPDATE AccountTbl SET AcName=@AN, AcPhone=@AP, AcAddress=@AA, AcGen=@AG, AcOccup=@AO, AcEduc=@AE, AcInc=@AI WHERE AcNum=@AcKey", Con);
                // Use control names from Designer.cs
                cmd.Parameters.AddWithValue("@AN", AcNameTbl.Text);
                cmd.Parameters.AddWithValue("@AP", AcPhoneTbl.Text);
                cmd.Parameters.AddWithValue("@AA", AcAddressTbl.Text);
                cmd.Parameters.AddWithValue("@AG", GenderTbl.SelectedItem.ToString()); // Use GenderTbl
                cmd.Parameters.AddWithValue("@AO", OccupationTbl.Text);
                cmd.Parameters.AddWithValue("@AE", EducationCb.SelectedItem.ToString());
                cmd.Parameters.AddWithValue("@AI", IncomeTbl.Text); // Convert if DB field is numeric
                cmd.Parameters.AddWithValue("@AcKey", Key);
                cmd.ExecuteNonQuery();
                MessageBox.Show("Account Updated!!!");
            }
            catch (Exception Ex) { MessageBox.Show(Ex.Message); }
            finally { if (Con.State == ConnectionState.Open) Con.Close(); }
            Reset(); // Reset fields after successful operation
            DisplayAccounts(); // Refresh grid
        }

        // Delete Button (DELETE)
        // !! IMPORTANT: Ensure this method name matches the Click handler !!
        // !!            for the 'DeleteBtn'/'CancelBtn' in the Designer Properties !!
        private void DeleteBtn_Click(object sender, EventArgs e) // Or btnCancel_Click if not renamed
        {
            // Uses Key set by AccountDGV_SelectionChanged
            if (Key == 0) { MessageBox.Show("Select The Account to Delete"); return; } // Updated message

            // Optional: Ask for confirmation
            DialogResult confirm = MessageBox.Show("Are you sure you want to delete this account?", "Confirm Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (confirm == DialogResult.No) return;

            try
            {
                if (Con.State == ConnectionState.Closed) Con.Open();
                // !! Verify table name and PK column name (AcNum) !!
                SqlCommand cmd = new SqlCommand("DELETE FROM AccountTbl WHERE AcNum=@AcKey", Con);
                cmd.Parameters.AddWithValue("@AcKey", Key);
                cmd.ExecuteNonQuery();
                MessageBox.Show("Account Deleted!!!");
            }
            catch (Exception Ex) { MessageBox.Show(Ex.Message); }
            finally { if (Con.State == ConnectionState.Open) Con.Close(); }
            Reset(); // Reset fields after successful operation
            DisplayAccounts(); // Refresh grid
        }

        #endregion

        #region Form Dragging Methods

        // --- Mouse events for form dragging ---
        private void Form_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left) { isDragging = true; lastLocation = e.Location; }
        }
        private void Form_MouseMove(object sender, MouseEventArgs e)
        {
            if (isDragging) { this.Location = new Point((this.Location.X - lastLocation.X) + e.X, (this.Location.Y - lastLocation.Y) + e.Y); this.Update(); }
        }
        private void Form_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left) { isDragging = false; }
        }

        #endregion

        #region Unused/Placeholder Event Handlers

        // Matches Designer.cs wiring - leave empty or remove carefully
        private void labelOccupation_Click(object sender, EventArgs e)
        {
            // Usually no action needed when clicking a label
        }

        #endregion

        private void panelMain_Paint(object sender, PaintEventArgs e)
        {

        }
    } 
} 